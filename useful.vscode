//
// settings.json
//

// Disable error squiggles globally, less distracting, but still shows in minimap
// and problems panel when you want to see them. The [Default Dark+] part is optional
// if you want this enabled for all themes
"workbench.colorCustomizations": {
    "[Default Dark+]": {
        "editorError.foreground": "#00000000",
        "editorWarning.foreground": "#00000000",
        "editorHint.foreground": "#00000000",
        "editorInfo.foreground": "#00000000",
    }
}

// Cmake tools config stuff
"cmake.configureOnOpen": false,
"cmake.ctestArgs": [
    "--output-on-failure"
],
"cmake.parallelJobs": 10,
"cmake.buildDirectory": "${workspaceFolder}/build/${buildType}/",

"cmake.configureArgs": [
    "-DSOME_ARG_FROM_CMAKE=ON",
],

// keybinds
// Place your key bindings in this file to override the defaultsauto[]
[
    { "key": "ctrl+tab", "command": "workbench.action.closePanel"                                                                      },
    { "key": "ctrl+j", "command": "editor.action.joinLines"                                                                            },
    { "key": "ctrl+f10", "command": "editor.debug.action.runToCursor"                                                                  },
    { "key": "ctrl+k ctrl+r", "command": "workbench.action.restartExtensionHost"                                                       },
    { "key": "ctrl+[Minus]", "command": "editor.action.fontZoomIn"                                                                     },
    { "key": "ctrl+-", "command": "editor.action.fontZoomOut"                                                                          },
    { "key": "ctrl+0", "command": "editor.action.fontZoomReset"                                                                        },
    { "key": "alt+left", "command": "workbench.action.navigateBack"                                                                    },
    { "key": "ctrl+alt+-", "command": "-workbench.action.navigateBack"                                                                 },
    { "key": "alt+right", "command": "workbench.action.navigateForward"                                                                },
    { "key": "ctrl+shift+-", "command": "-workbench.action.navigateForward"                                                            },
    { "key": "ctrl+[Period]", "command": "workbench.action.splitEditorRight"                                                           },
    { "key": "ctrl+k ctrl+s", "command": "workbench.action.splitEditorDown"                                                            },
    { "key": "ctrl+shift+[Period]", "command": "workbench.action.closeEditorsInGroup"                                                  },
    { "key": "ctrl+k w", "command": "-workbench.action.closeEditorsInGroup"                                                            },
    { "key": "ctrl+[Comma]", "command": "workbench.action.focusNextGroup"                                                              },
    { "key": "ctrl+q", "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"                                                                                       },
    { "key": "ctrl+k ctrl+i", "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"                                                                                       },
    { "key": "ctrl+q", "command": "editor.action.showHover",
        "when": "editorTextFocus"                                                                                                      },
    { "key": "ctrl+k ctrl+i", "command": "-editor.action.showHover",
        "when": "editorTextFocus"                                                                                                      },
    { "key": "ctrl+shift+i", "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"     },
    { "key": "ctrl+shift+i", "command": "editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorHasDocumentFormattingProvider && !editorReadonly"   },
    { "key": "ctrl+k ctrl+f", "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" }
]


//
// launch.json
//

// CodeLLDB debugger example (linux with cmake tools)
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "lldb",
            "request": "launch",
            "name": "lldb launch",

            "program": "${command:cmake.launchTargetPath}",
            "cwd": "${command:cmake.launchTargetDirectory}",

            "env": {
                "LSAN_OPTIONS": "log_threads=1:fast_unwind_on_malloc=0",
            },

            "args": [
                "--some_arg", "1",
                // "--some_other_arg_that_is_commented_out",
            ]
        }
    ]
}


//
// tasks.json
//
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build defaulttarget",
            "type": "shell",
            "command": "cmake --build . --target defaulttarget",
            "options": {
                "cwd": "${workspaceFolder}/<build_path>"
            },
            "problemMatcher": "$gcc",
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "build target",
            "type": "shell",
            "command": "cmake --build . --target ${input:cmakeBuildTarget}",
            "problemMatcher": "$gcc",
            "options": {
                "cwd": "${workspaceFolder}/<build_path>"
            },
        },
        {
            "label": "cmake configure",
            "type": "shell",
            "command": "cmake .",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/<build_path>"
            },
        },
    ],
    "inputs": [
        {
            "id": "cmakeBuildTarget",
            "type": "promptString",
            "description": "CMake build target",
            "default": "all",
        }
    ]
}